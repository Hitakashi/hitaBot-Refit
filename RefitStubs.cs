﻿using System;
using System.Net.Http;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using hitaBot.Refit.Model;
using Refit;
using System.IO;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

namespace RefitInternalGenerated
{
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {
#pragma warning disable 0649
        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
#pragma warning restore 0649
    }
}

namespace hitaBot.Refit.api
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedAuthApi : AuthApi
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedAuthApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual Task<ValidLogin> authUserPass(Login body)
        {
            var arguments = new object[] { body };
            return (Task<ValidLogin>) methodImpls["authUserPass"](Client, arguments);
        }

        public virtual Task<ValidLoginToken> authToken(Login body)
        {
            var arguments = new object[] { body };
            return (Task<ValidLoginToken>) methodImpls["authToken"](Client, arguments);
        }

        public virtual Task<ValidAuth> verifyAuth(String app,String token)
        {
            var arguments = new object[] { app,token };
            return (Task<ValidAuth>) methodImpls["verifyAuth"](Client, arguments);
        }

    }
}

namespace hitaBot.Refit.api
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedChannelApi : ChannelApi
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedChannelApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual Task<EditorsList> getEditors(String authToken,String channel)
        {
            var arguments = new object[] { authToken,channel };
            return (Task<EditorsList>) methodImpls["getEditors"](Client, arguments);
        }

        public virtual Task<Success> modifyEditors(string channel,ModifyEditorsList body)
        {
            var arguments = new object[] { channel,body };
            return (Task<Success>) methodImpls["modifyEditors"](Client, arguments);
        }

        public virtual Task<FollowersList> getFollowers(string channel,string reverse,string sort,int? limit,int? offset)
        {
            var arguments = new object[] { channel,reverse,sort,limit,offset };
            return (Task<FollowersList>) methodImpls["getFollowers"](Client, arguments);
        }

        public virtual Task<FollowerStats> getFollowerStats(String channel,String authToken)
        {
            var arguments = new object[] { channel,authToken };
            return (Task<FollowerStats>) methodImpls["getFollowerStats"](Client, arguments);
        }

        public virtual Task<HostersList> getHosters(String channel,String authToken)
        {
            var arguments = new object[] { channel,authToken };
            return (Task<HostersList>) methodImpls["getHosters"](Client, arguments);
        }

        public virtual Task<SubBadge> getSubBadge(String channel)
        {
            var arguments = new object[] { channel };
            return (Task<SubBadge>) methodImpls["getSubBadge"](Client, arguments);
        }

        public virtual Task<MediaKey> getStreamKey(String channel,String authToken)
        {
            var arguments = new object[] { channel,authToken };
            return (Task<MediaKey>) methodImpls["getStreamKey"](Client, arguments);
        }

        public virtual Task<MediaKey> resetStreamKey(String channel,String authToken)
        {
            var arguments = new object[] { channel,authToken };
            return (Task<MediaKey>) methodImpls["resetStreamKey"](Client, arguments);
        }

        public virtual Task<PanelProfile> getPanels(String channel)
        {
            var arguments = new object[] { channel };
            return (Task<PanelProfile>) methodImpls["getPanels"](Client, arguments);
        }

        public virtual Task<ErrorOnly> updatePanels(String channel,PanelUpdate body)
        {
            var arguments = new object[] { channel,body };
            return (Task<ErrorOnly>) methodImpls["updatePanels"](Client, arguments);
        }

        public virtual Task<SuccessOnly> toggleProfile(String channel,ProfileEnable body)
        {
            var arguments = new object[] { channel,body };
            return (Task<SuccessOnly>) methodImpls["toggleProfile"](Client, arguments);
        }

        public virtual Task<RevenueStats> getRevenueStats(String channel,String authToken,String startDate,String endDate)
        {
            var arguments = new object[] { channel,authToken,startDate,endDate };
            return (Task<RevenueStats>) methodImpls["getRevenueStats"](Client, arguments);
        }

        public virtual Task<StreamedSeconds> getStreamedSeconds(String channel,String startEpoch,String endEpoch,String authToken)
        {
            var arguments = new object[] { channel,startEpoch,endEpoch,authToken };
            return (Task<StreamedSeconds>) methodImpls["getStreamedSeconds"](Client, arguments);
        }

        public virtual Task<StreamOverall> getOverallStats(String channel,String startEpoch,String endEpoch,String authToken)
        {
            var arguments = new object[] { channel,startEpoch,endEpoch,authToken };
            return (Task<StreamOverall>) methodImpls["getOverallStats"](Client, arguments);
        }

        public virtual Task<StreamStats> getStreamStats(String channel,String startEpoch,String endEpoch,String authToken)
        {
            var arguments = new object[] { channel,startEpoch,endEpoch,authToken };
            return (Task<StreamStats>) methodImpls["getStreamStats"](Client, arguments);
        }

        public virtual Task<SubInfo> getSubInfo(String channel)
        {
            var arguments = new object[] { channel };
            return (Task<SubInfo>) methodImpls["getSubInfo"](Client, arguments);
        }

        public virtual Task<ComBreak> runCom(String channel,String count,AuthToken body)
        {
            var arguments = new object[] { channel,count,body };
            return (Task<ComBreak>) methodImpls["runCom"](Client, arguments);
        }

    }
}

namespace hitaBot.Refit.api
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedChatApi : ChatApi
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedChatApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual Task<ChatBlacklist> getChatBlacklist(String channel)
        {
            var arguments = new object[] { channel };
            return (Task<ChatBlacklist>) methodImpls["getChatBlacklist"](Client, arguments);
        }

        public virtual Task<String> updateChatBlacklist(String channel,String authToken,UpdateChatBlacklist body)
        {
            var arguments = new object[] { channel,authToken,body };
            return (Task<String>) methodImpls["updateChatBlacklist"](Client, arguments);
        }

        public virtual Task<ChatEmotes> getChatEmotes(String user,String authToken)
        {
            var arguments = new object[] { user,authToken };
            return (Task<ChatEmotes>) methodImpls["getChatEmotes"](Client, arguments);
        }

        public virtual Task<ChatIconInfo> getChatIconInfo(String iconName)
        {
            var arguments = new object[] { iconName };
            return (Task<ChatIconInfo>) methodImpls["getChatIconInfo"](Client, arguments);
        }

        public virtual Task<ChatIcons> getChatIcons(String channel,String premiumOnly)
        {
            var arguments = new object[] { channel,premiumOnly };
            return (Task<ChatIcons>) methodImpls["getChatIcons"](Client, arguments);
        }

        public virtual Task<ChatModerations> getModerations(String user,String authToken)
        {
            var arguments = new object[] { user,authToken };
            return (Task<ChatModerations>) methodImpls["getModerations"](Client, arguments);
        }

        public virtual Task<ChatModerators> getChatMods(String channel,String authToken)
        {
            var arguments = new object[] { channel,authToken };
            return (Task<ChatModerators>) methodImpls["getChatMods"](Client, arguments);
        }

        public virtual Task<Success> modifyChatMods(String channel,AddChatModerators body)
        {
            var arguments = new object[] { channel,body };
            return (Task<Success>) methodImpls["modifyChatMods"](Client, arguments);
        }

        public virtual Task<WSServers> getChatServers()
        {
            var arguments = new object[] {  };
            return (Task<WSServers>) methodImpls["getChatServers"](Client, arguments);
        }

        public virtual Task<ChatSettings> getChatSettings(String channel,String authToken)
        {
            var arguments = new object[] { channel,authToken };
            return (Task<ChatSettings>) methodImpls["getChatSettings"](Client, arguments);
        }

        public virtual Task<Success> updateChatSettings(String channel,String authToken,ChatSettings body)
        {
            var arguments = new object[] { channel,authToken,body };
            return (Task<Success>) methodImpls["updateChatSettings"](Client, arguments);
        }

        public virtual Task<Game> getGame(String game,Boolean soe)
        {
            var arguments = new object[] { game,soe };
            return (Task<Game>) methodImpls["getGame"](Client, arguments);
        }

        public virtual Task<Games> getGames(String q,int limit,Boolean liveonly)
        {
            var arguments = new object[] { q,limit,liveonly };
            return (Task<Games>) methodImpls["getGames"](Client, arguments);
        }

    }
}

namespace hitaBot.Refit.api
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedMediaApi : MediaApi
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedMediaApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual Task<Ingests> getIngests()
        {
            var arguments = new object[] {  };
            return (Task<Ingests>) methodImpls["getIngests"](Client, arguments);
        }

        public virtual Task<MediaList> getMediaLiveList(int limit,Boolean showHidden,String filter,String liveonly,String featured,int followerId,String game,Boolean hiddenOnly,int start,Boolean publicOnly,String search)
        {
            var arguments = new object[] { limit,showHidden,filter,liveonly,featured,followerId,game,hiddenOnly,start,publicOnly,search };
            return (Task<MediaList>) methodImpls["getMediaLiveList"](Client, arguments);
        }

        public virtual Task<Media> getMediaLive(String channel,String authToken,String limit,Boolean showHidden,String liveonly)
        {
            var arguments = new object[] { channel,authToken,limit,showHidden,liveonly };
            return (Task<Media>) methodImpls["getMediaLive"](Client, arguments);
        }

        public virtual Task<UpdateMedia> updateMedia(String channel,String authToken,UpdateMedia body)
        {
            var arguments = new object[] { channel,authToken,body };
            return (Task<UpdateMedia>) methodImpls["updateMedia"](Client, arguments);
        }

        public virtual Task<Object> getMediaStatus(String channel)
        {
            var arguments = new object[] { channel };
            return (Task<Object>) methodImpls["getMediaStatus"](Client, arguments);
        }

        public virtual Task<Object> createVideo(String authToken,CreateVideo body)
        {
            var arguments = new object[] { authToken,body };
            return (Task<Object>) methodImpls["createVideo"](Client, arguments);
        }

        public virtual Task<VideoList> getVideoList(String channel,String authToken,String filter,Boolean hiddenOnly,int limit,Boolean publicOnly,String search,Boolean showHidden,Boolean yt)
        {
            var arguments = new object[] { channel,authToken,filter,hiddenOnly,limit,publicOnly,search,showHidden,yt };
            return (Task<VideoList>) methodImpls["getVideoList"](Client, arguments);
        }

        public virtual Task<Video> getVideo(int videoID,Boolean showHidden)
        {
            var arguments = new object[] { videoID,showHidden };
            return (Task<Video>) methodImpls["getVideo"](Client, arguments);
        }

        public virtual Task<UpdateVideo> updateVideo(int videoID,String authToken,UpdateVideo body)
        {
            var arguments = new object[] { videoID,authToken,body };
            return (Task<UpdateVideo>) methodImpls["updateVideo"](Client, arguments);
        }

        public virtual Task<Object> getMediaViews(String channel)
        {
            var arguments = new object[] { channel };
            return (Task<Object>) methodImpls["getMediaViews"](Client, arguments);
        }

        public virtual Task<MediaInfo> getMediaInfo(String mediaID)
        {
            var arguments = new object[] { mediaID };
            return (Task<MediaInfo>) methodImpls["getMediaInfo"](Client, arguments);
        }

        public virtual Task<Recording> getRecordings(String channel,String authToken,int limit)
        {
            var arguments = new object[] { channel,authToken,limit };
            return (Task<Recording>) methodImpls["getRecordings"](Client, arguments);
        }

    }
}

namespace hitaBot.Refit.api
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedRootApi : RootApi
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedRootApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual Task<Object> globalMessage()
        {
            var arguments = new object[] {  };
            return (Task<Object>) methodImpls["globalMessage"](Client, arguments);
        }

    }
}

namespace hitaBot.Refit.api
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedTeamApi : TeamApi
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedTeamApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual Task<Object> createTeam(String authToken,CreateTeam body)
        {
            var arguments = new object[] { authToken,body };
            return (Task<Object>) methodImpls["createTeam"](Client, arguments);
        }

        public virtual Task<Team> getTeam(String teamName,String filter,int limit,Boolean liveonly,Boolean media,String mediaType,int offset)
        {
            var arguments = new object[] { teamName,filter,limit,liveonly,media,mediaType,offset };
            return (Task<Team>) methodImpls["getTeam"](Client, arguments);
        }

        public virtual Task<UpdateTeam> updateTeam(String teamName,String user,String authToken,UpdateTeam body,String action)
        {
            var arguments = new object[] { teamName,user,authToken,body,action };
            return (Task<UpdateTeam>) methodImpls["updateTeam"](Client, arguments);
        }

        public virtual Task<Object> deleteTeam(String teamName,String user,String authToken,int groupId)
        {
            var arguments = new object[] { teamName,user,authToken,groupId };
            return (Task<Object>) methodImpls["deleteTeam"](Client, arguments);
        }

        public virtual Task<TeamList> getTeamList(String q)
        {
            var arguments = new object[] { q };
            return (Task<TeamList>) methodImpls["getTeamList"](Client, arguments);
        }

        public virtual Task<Teams> searchTeams(String search)
        {
            var arguments = new object[] { search };
            return (Task<Teams>) methodImpls["searchTeams"](Client, arguments);
        }

        public virtual Task<TeamsUser> getTeamUser(String user,Boolean liveonly,Boolean media,String mediaType,Boolean partner)
        {
            var arguments = new object[] { user,liveonly,media,mediaType,partner };
            return (Task<TeamsUser>) methodImpls["getTeamUser"](Client, arguments);
        }

    }
}

namespace hitaBot.Refit.api
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedUploadApi : UploadApi
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedUploadApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual Task<Object> uploadUserAvatarCover(String user,String authToken,Stream file,Stream cover)
        {
            var arguments = new object[] { user,authToken,file,cover };
            return (Task<Object>) methodImpls["uploadUserAvatarCover"](Client, arguments);
        }

        public virtual Task<List<Object>> getDescImages(String channel,String authToken)
        {
            var arguments = new object[] { channel,authToken };
            return (Task<List<Object>>) methodImpls["getDescImages"](Client, arguments);
        }

        public virtual Task<String> uploadDescImage(String channel,String authToken,Stream file)
        {
            var arguments = new object[] { channel,authToken,file };
            return (Task<String>) methodImpls["uploadDescImage"](Client, arguments);
        }

        public virtual Task<String> removeDescImages(String channel,String authToken,String imageId)
        {
            var arguments = new object[] { channel,authToken,imageId };
            return (Task<String>) methodImpls["removeDescImages"](Client, arguments);
        }

        public virtual Task<TeamUplaod> uploadTeamImage(String user,String authToken,Stream file)
        {
            var arguments = new object[] { user,authToken,file };
            return (Task<TeamUplaod>) methodImpls["uploadTeamImage"](Client, arguments);
        }

    }
}

namespace hitaBot.Refit.api
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedUserApi : UserApi
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedUserApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual Task<Object> postFacebook(String authToken,String userName)
        {
            var arguments = new object[] { authToken,userName };
            return (Task<Object>) methodImpls["postFacebook"](Client, arguments);
        }

        public virtual Task<SuccessFollow> followChannel(String authToken,Object body)
        {
            var arguments = new object[] { authToken,body };
            return (Task<SuccessFollow>) methodImpls["followChannel"](Client, arguments);
        }

        public virtual Task<Object> unfollowUser(String authToken,String followId,String type)
        {
            var arguments = new object[] { authToken,followId,type };
            return (Task<Object>) methodImpls["unfollowUser"](Client, arguments);
        }

        public virtual Task<FollowingUser> getFollowing(String userName,String sort,int offset,int limit,Boolean reverse)
        {
            var arguments = new object[] { userName,sort,offset,limit,reverse };
            return (Task<FollowingUser>) methodImpls["getFollowing"](Client, arguments);
        }

        public virtual Task<FollowingUserChannel> getFollowingUser(String channel,String userName)
        {
            var arguments = new object[] { channel,userName };
            return (Task<FollowingUserChannel>) methodImpls["getFollowingUser"](Client, arguments);
        }

        public virtual Task<Notifications> getNotifications(String authToken,String userName)
        {
            var arguments = new object[] { authToken,userName };
            return (Task<Notifications>) methodImpls["getNotifications"](Client, arguments);
        }

        public virtual Task<String> setNotifications(String authToken,String userName,SetNotifications body)
        {
            var arguments = new object[] { authToken,userName,body };
            return (Task<String>) methodImpls["setNotifications"](Client, arguments);
        }

        public virtual Task<SubscriberList> getSubscriberList(String user,String authToken)
        {
            var arguments = new object[] { user,authToken };
            return (Task<SubscriberList>) methodImpls["getSubscriberList"](Client, arguments);
        }

        public virtual Task<SubscriptionList> getSubscriptionList(String user,String authToken)
        {
            var arguments = new object[] { user,authToken };
            return (Task<SubscriptionList>) methodImpls["getSubscriptionList"](Client, arguments);
        }

        public virtual Task<Object> postTwitter(String authToken,String userName)
        {
            var arguments = new object[] { authToken,userName };
            return (Task<Object>) methodImpls["postTwitter"](Client, arguments);
        }

        public virtual Task<UserAccess> getAccessLevel(String channel,String authToken)
        {
            var arguments = new object[] { channel,authToken };
            return (Task<UserAccess>) methodImpls["getAccessLevel"](Client, arguments);
        }

        public virtual Task<UserList> getUserList(String q)
        {
            var arguments = new object[] { q };
            return (Task<UserList>) methodImpls["getUserList"](Client, arguments);
        }

        public virtual Task<Object> getSubStatus(String channel,String authToken)
        {
            var arguments = new object[] { channel,authToken };
            return (Task<Object>) methodImpls["getSubStatus"](Client, arguments);
        }

        public virtual Task<User> getUser(String user,String authToken)
        {
            var arguments = new object[] { user,authToken };
            return (Task<User>) methodImpls["getUser"](Client, arguments);
        }

        public virtual Task<Object> updateUser(String authToken,String user,UserUpdate body)
        {
            var arguments = new object[] { authToken,user,body };
            return (Task<Object>) methodImpls["updateUser"](Client, arguments);
        }

        public virtual Task<Successful> setDefaultTeam(String authToken,Object body)
        {
            var arguments = new object[] { authToken,body };
            return (Task<Successful>) methodImpls["setDefaultTeam"](Client, arguments);
        }

    }
}


