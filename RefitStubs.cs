﻿using System;
using System.Net.Http;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using hitaBot.Refit.Model;
using Refit;
using System.IO;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

namespace RefitInternalGenerated
{
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {
#pragma warning disable 0649
        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
#pragma warning restore 0649
    }
}

namespace hitaBot.Refit.api
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedIAuth : IAuth
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedIAuth(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual Task<ValidLogin> authUserPass(Login body)
        {
            var arguments = new object[] { body };
            return (Task<ValidLogin>) methodImpls["authUserPass"](Client, arguments);
        }

        public virtual Task<ValidLoginToken> authToken(Login body)
        {
            var arguments = new object[] { body };
            return (Task<ValidLoginToken>) methodImpls["authToken"](Client, arguments);
        }

        public virtual Task<ValidAuth> verifyAuth(string app,string token)
        {
            var arguments = new object[] { app,token };
            return (Task<ValidAuth>) methodImpls["verifyAuth"](Client, arguments);
        }

    }
}

namespace hitaBot.Refit.api
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedIChannel : IChannel
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedIChannel(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual Task<EditorsList> getEditors(string authToken,string channel)
        {
            var arguments = new object[] { authToken,channel };
            return (Task<EditorsList>) methodImpls["getEditors"](Client, arguments);
        }

        public virtual Task<Success> modifyEditors(string channel,ModifyEditorsList body)
        {
            var arguments = new object[] { channel,body };
            return (Task<Success>) methodImpls["modifyEditors"](Client, arguments);
        }

        public virtual Task<FollowersList> getFollowers(string channel,string reverse,string sort,int? limit,int? offset)
        {
            var arguments = new object[] { channel,reverse,sort,limit,offset };
            return (Task<FollowersList>) methodImpls["getFollowers"](Client, arguments);
        }

        public virtual Task<FollowerStats> getFollowerStats(string channel,string authToken)
        {
            var arguments = new object[] { channel,authToken };
            return (Task<FollowerStats>) methodImpls["getFollowerStats"](Client, arguments);
        }

        public virtual Task<HostersList> getHosters(string channel,string authToken)
        {
            var arguments = new object[] { channel,authToken };
            return (Task<HostersList>) methodImpls["getHosters"](Client, arguments);
        }

        public virtual Task<SubBadge> getSubBadge(string channel)
        {
            var arguments = new object[] { channel };
            return (Task<SubBadge>) methodImpls["getSubBadge"](Client, arguments);
        }

        public virtual Task<MediaKey> getStreamKey(string channel,string authToken)
        {
            var arguments = new object[] { channel,authToken };
            return (Task<MediaKey>) methodImpls["getStreamKey"](Client, arguments);
        }

        public virtual Task<MediaKey> resetStreamKey(string channel,string authToken)
        {
            var arguments = new object[] { channel,authToken };
            return (Task<MediaKey>) methodImpls["resetStreamKey"](Client, arguments);
        }

        public virtual Task<PanelProfile> getPanels(string channel)
        {
            var arguments = new object[] { channel };
            return (Task<PanelProfile>) methodImpls["getPanels"](Client, arguments);
        }

        public virtual Task<ErrorOnly> updatePanels(string channel,PanelUpdate body)
        {
            var arguments = new object[] { channel,body };
            return (Task<ErrorOnly>) methodImpls["updatePanels"](Client, arguments);
        }

        public virtual Task<SuccessOnly> toggleProfile(string channel,ProfileEnable body)
        {
            var arguments = new object[] { channel,body };
            return (Task<SuccessOnly>) methodImpls["toggleProfile"](Client, arguments);
        }

        public virtual Task<RevenueStats> getRevenueStats(string channel,string authToken,string startDate,string endDate)
        {
            var arguments = new object[] { channel,authToken,startDate,endDate };
            return (Task<RevenueStats>) methodImpls["getRevenueStats"](Client, arguments);
        }

        public virtual Task<StreamedSeconds> getStreamedSeconds(string channel,string startEpoch,string endEpoch,string authToken)
        {
            var arguments = new object[] { channel,startEpoch,endEpoch,authToken };
            return (Task<StreamedSeconds>) methodImpls["getStreamedSeconds"](Client, arguments);
        }

        public virtual Task<StreamOverall> getOverallStats(string channel,string startEpoch,string endEpoch,string authToken)
        {
            var arguments = new object[] { channel,startEpoch,endEpoch,authToken };
            return (Task<StreamOverall>) methodImpls["getOverallStats"](Client, arguments);
        }

        public virtual Task<StreamStats> getStreamStats(string channel,string startEpoch,string endEpoch,string authToken)
        {
            var arguments = new object[] { channel,startEpoch,endEpoch,authToken };
            return (Task<StreamStats>) methodImpls["getStreamStats"](Client, arguments);
        }

        public virtual Task<SubInfo> getSubInfo(string channel)
        {
            var arguments = new object[] { channel };
            return (Task<SubInfo>) methodImpls["getSubInfo"](Client, arguments);
        }

        public virtual Task<ComBreak> runCom(string channel,string count,AuthToken body)
        {
            var arguments = new object[] { channel,count,body };
            return (Task<ComBreak>) methodImpls["runCom"](Client, arguments);
        }

    }
}

namespace hitaBot.Refit.api
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedIChat : IChat
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedIChat(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual Task<ChatBlacklist> getChatBlacklist(string channel)
        {
            var arguments = new object[] { channel };
            return (Task<ChatBlacklist>) methodImpls["getChatBlacklist"](Client, arguments);
        }

        public virtual Task<SuccessOnlyString> updateChatBlacklist(string channel,string authToken,UpdateChatBlacklist body)
        {
            var arguments = new object[] { channel,authToken,body };
            return (Task<SuccessOnlyString>) methodImpls["updateChatBlacklist"](Client, arguments);
        }

        public virtual Task<ChatEmotes> getChatEmotes(string user,string authToken)
        {
            var arguments = new object[] { user,authToken };
            return (Task<ChatEmotes>) methodImpls["getChatEmotes"](Client, arguments);
        }

        public virtual Task<ChatIconInfo> getChatIconInfo(string iconName)
        {
            var arguments = new object[] { iconName };
            return (Task<ChatIconInfo>) methodImpls["getChatIconInfo"](Client, arguments);
        }

        public virtual Task<ChatIcons> getChatIcons(string channel,string premiumOnly)
        {
            var arguments = new object[] { channel,premiumOnly };
            return (Task<ChatIcons>) methodImpls["getChatIcons"](Client, arguments);
        }

        public virtual Task<ChatModerations> getModerations(string user,string authToken)
        {
            var arguments = new object[] { user,authToken };
            return (Task<ChatModerations>) methodImpls["getModerations"](Client, arguments);
        }

        public virtual Task<ChatModerators> getChatMods(string channel,string authToken)
        {
            var arguments = new object[] { channel,authToken };
            return (Task<ChatModerators>) methodImpls["getChatMods"](Client, arguments);
        }

        public virtual Task<Success> modifyChatMods(string channel,AddChatModerators body)
        {
            var arguments = new object[] { channel,body };
            return (Task<Success>) methodImpls["modifyChatMods"](Client, arguments);
        }

        public virtual Task<WSServers> getChatServers()
        {
            var arguments = new object[] {  };
            return (Task<WSServers>) methodImpls["getChatServers"](Client, arguments);
        }

        public virtual Task<ChatSettings> getChatSettings(string channel,string authToken)
        {
            var arguments = new object[] { channel,authToken };
            return (Task<ChatSettings>) methodImpls["getChatSettings"](Client, arguments);
        }

        public virtual Task<Success> updateChatSettings(string channel,string authToken,ChatSettings body)
        {
            var arguments = new object[] { channel,authToken,body };
            return (Task<Success>) methodImpls["updateChatSettings"](Client, arguments);
        }

    }
}

namespace hitaBot.Refit.api
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedIMedia : IMedia
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedIMedia(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual Task<Ingests> getIngests()
        {
            var arguments = new object[] {  };
            return (Task<Ingests>) methodImpls["getIngests"](Client, arguments);
        }

        public virtual Task<MediaList> getMediaLiveList(int limit,bool showHidden,string filter,string liveonly,string featured,int followerId,string game,bool hiddenOnly,int start,bool publicOnly,string search)
        {
            var arguments = new object[] { limit,showHidden,filter,liveonly,featured,followerId,game,hiddenOnly,start,publicOnly,search };
            return (Task<MediaList>) methodImpls["getMediaLiveList"](Client, arguments);
        }

        public virtual Task<Media> getMediaLive(string channel,string authToken,string limit,bool showHidden,string liveonly)
        {
            var arguments = new object[] { channel,authToken,limit,showHidden,liveonly };
            return (Task<Media>) methodImpls["getMediaLive"](Client, arguments);
        }

        public virtual Task<UpdateMedia> updateMedia(string channel,string authToken,UpdateMedia body)
        {
            var arguments = new object[] { channel,authToken,body };
            return (Task<UpdateMedia>) methodImpls["updateMedia"](Client, arguments);
        }

        public virtual Task<MediaStatus> getMediaStatus(string channel)
        {
            var arguments = new object[] { channel };
            return (Task<MediaStatus>) methodImpls["getMediaStatus"](Client, arguments);
        }

        public virtual Task<VideoCreated> createVideo(string authToken,CreateVideo body)
        {
            var arguments = new object[] { authToken,body };
            return (Task<VideoCreated>) methodImpls["createVideo"](Client, arguments);
        }

        public virtual Task<VideoList> getVideoList(string channel,string authToken,string filter,bool hiddenOnly,int limit,bool publicOnly,string search,bool showHidden,bool yt)
        {
            var arguments = new object[] { channel,authToken,filter,hiddenOnly,limit,publicOnly,search,showHidden,yt };
            return (Task<VideoList>) methodImpls["getVideoList"](Client, arguments);
        }

        public virtual Task<Video> getVideo(int videoID,bool showHidden)
        {
            var arguments = new object[] { videoID,showHidden };
            return (Task<Video>) methodImpls["getVideo"](Client, arguments);
        }

        public virtual Task<UpdateVideo> updateVideo(int videoID,string authToken,UpdateVideo body)
        {
            var arguments = new object[] { videoID,authToken,body };
            return (Task<UpdateVideo>) methodImpls["updateVideo"](Client, arguments);
        }

        public virtual Task<MediaViews> getMediaViews(string channel)
        {
            var arguments = new object[] { channel };
            return (Task<MediaViews>) methodImpls["getMediaViews"](Client, arguments);
        }

        public virtual Task<MediaInfo> getMediaInfo(string mediaID)
        {
            var arguments = new object[] { mediaID };
            return (Task<MediaInfo>) methodImpls["getMediaInfo"](Client, arguments);
        }

        public virtual Task<Recording> getRecordings(string channel,string authToken,int limit)
        {
            var arguments = new object[] { channel,authToken,limit };
            return (Task<Recording>) methodImpls["getRecordings"](Client, arguments);
        }

        public virtual Task<Game> getGame(string game,bool soe)
        {
            var arguments = new object[] { game,soe };
            return (Task<Game>) methodImpls["getGame"](Client, arguments);
        }

        public virtual Task<Games> getGames(string q,int limit,bool liveonly)
        {
            var arguments = new object[] { q,limit,liveonly };
            return (Task<Games>) methodImpls["getGames"](Client, arguments);
        }

    }
}

namespace hitaBot.Refit.api
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedRootApi : RootApi
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedRootApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual Task<GlobalMessage> globalMessage()
        {
            var arguments = new object[] {  };
            return (Task<GlobalMessage>) methodImpls["globalMessage"](Client, arguments);
        }

    }
}

namespace hitaBot.Refit.api
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedITeam : ITeam
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedITeam(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual Task<TeamCreate> createTeam(string authToken,CreateTeam body)
        {
            var arguments = new object[] { authToken,body };
            return (Task<TeamCreate>) methodImpls["createTeam"](Client, arguments);
        }

        public virtual Task<Team> getTeam(string teamName,string filter,int limit,bool liveonly,bool media,string mediaType,int offset)
        {
            var arguments = new object[] { teamName,filter,limit,liveonly,media,mediaType,offset };
            return (Task<Team>) methodImpls["getTeam"](Client, arguments);
        }

        public virtual Task<UpdateTeam> updateTeam(string teamName,string user,string authToken,UpdateTeam body,string action)
        {
            var arguments = new object[] { teamName,user,authToken,body,action };
            return (Task<UpdateTeam>) methodImpls["updateTeam"](Client, arguments);
        }

        public virtual Task<LeaveTeam> deleteTeam(string teamName,string user,string authToken,int groupId)
        {
            var arguments = new object[] { teamName,user,authToken,groupId };
            return (Task<LeaveTeam>) methodImpls["deleteTeam"](Client, arguments);
        }

        public virtual Task<TeamList> getTeamList(string q)
        {
            var arguments = new object[] { q };
            return (Task<TeamList>) methodImpls["getTeamList"](Client, arguments);
        }

        public virtual Task<Teams> searchTeams(string search)
        {
            var arguments = new object[] { search };
            return (Task<Teams>) methodImpls["searchTeams"](Client, arguments);
        }

        public virtual Task<TeamsUser> getTeamUser(string user,bool liveonly,bool media,string mediaType,bool partner)
        {
            var arguments = new object[] { user,liveonly,media,mediaType,partner };
            return (Task<TeamsUser>) methodImpls["getTeamUser"](Client, arguments);
        }

    }
}

namespace hitaBot.Refit.api
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedIUpload : IUpload
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedIUpload(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual Task<Cover> uploadUserAvatarCover(string user,string authToken,Stream file,Stream cover)
        {
            var arguments = new object[] { user,authToken,file,cover };
            return (Task<Cover>) methodImpls["uploadUserAvatarCover"](Client, arguments);
        }

        public virtual Task<List<GetUploadDesc>> getDescImages(string channel,string authToken)
        {
            var arguments = new object[] { channel,authToken };
            return (Task<List<GetUploadDesc>>) methodImpls["getDescImages"](Client, arguments);
        }

        public virtual Task<string> uploadDescImage(string channel,string authToken,Stream file)
        {
            var arguments = new object[] { channel,authToken,file };
            return (Task<string>) methodImpls["uploadDescImage"](Client, arguments);
        }

        public virtual Task<SuccessOnlyString> removeDescImages(string channel,string authToken,string imageId)
        {
            var arguments = new object[] { channel,authToken,imageId };
            return (Task<SuccessOnlyString>) methodImpls["removeDescImages"](Client, arguments);
        }

        public virtual Task<TeamUplaod> uploadTeamImage(string user,string authToken,Stream file)
        {
            var arguments = new object[] { user,authToken,file };
            return (Task<TeamUplaod>) methodImpls["uploadTeamImage"](Client, arguments);
        }

    }
}

namespace hitaBot.Refit.api
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedIUser : IUser
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedIUser(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual Task<SocialPost> postFacebook(string authToken,string userName)
        {
            var arguments = new object[] { authToken,userName };
            return (Task<SocialPost>) methodImpls["postFacebook"](Client, arguments);
        }

        public virtual Task<SuccessFollow> followChannel(string authToken,object body)
        {
            var arguments = new object[] { authToken,body };
            return (Task<SuccessFollow>) methodImpls["followChannel"](Client, arguments);
        }

        public virtual Task<UnfollowUser> unfollowUser(string authToken,string followId,string type)
        {
            var arguments = new object[] { authToken,followId,type };
            return (Task<UnfollowUser>) methodImpls["unfollowUser"](Client, arguments);
        }

        public virtual Task<FollowingUser> getFollowing(string userName,string sort,int offset,int limit,bool reverse)
        {
            var arguments = new object[] { userName,sort,offset,limit,reverse };
            return (Task<FollowingUser>) methodImpls["getFollowing"](Client, arguments);
        }

        public virtual Task<FollowingUserChannel> getFollowingUser(string channel,string userName)
        {
            var arguments = new object[] { channel,userName };
            return (Task<FollowingUserChannel>) methodImpls["getFollowingUser"](Client, arguments);
        }

        public virtual Task<Notifications> getNotifications(string authToken,string userName)
        {
            var arguments = new object[] { authToken,userName };
            return (Task<Notifications>) methodImpls["getNotifications"](Client, arguments);
        }

        public virtual Task<SuccessOnlyString> setNotifications(string authToken,string userName,SetNotifications body)
        {
            var arguments = new object[] { authToken,userName,body };
            return (Task<SuccessOnlyString>) methodImpls["setNotifications"](Client, arguments);
        }

        public virtual Task<SubscriberList> getSubscriberList(string user,string authToken)
        {
            var arguments = new object[] { user,authToken };
            return (Task<SubscriberList>) methodImpls["getSubscriberList"](Client, arguments);
        }

        public virtual Task<SubscriptionList> getSubscriptionList(string user,string authToken)
        {
            var arguments = new object[] { user,authToken };
            return (Task<SubscriptionList>) methodImpls["getSubscriptionList"](Client, arguments);
        }

        public virtual Task<SocialPost> postTwitter(string authToken,string userName)
        {
            var arguments = new object[] { authToken,userName };
            return (Task<SocialPost>) methodImpls["postTwitter"](Client, arguments);
        }

        public virtual Task<UserAccess> getAccessLevel(string channel,string authToken)
        {
            var arguments = new object[] { channel,authToken };
            return (Task<UserAccess>) methodImpls["getAccessLevel"](Client, arguments);
        }

        public virtual Task<UserList> getUserList(string q)
        {
            var arguments = new object[] { q };
            return (Task<UserList>) methodImpls["getUserList"](Client, arguments);
        }

        public virtual Task<IsSubscriber> getSubStatus(string channel,string authToken)
        {
            var arguments = new object[] { channel,authToken };
            return (Task<IsSubscriber>) methodImpls["getSubStatus"](Client, arguments);
        }

        public virtual Task<User> getUser(string user,string authToken)
        {
            var arguments = new object[] { user,authToken };
            return (Task<User>) methodImpls["getUser"](Client, arguments);
        }

        public virtual Task<UserUpdated> updateUser(string authToken,string user,UserUpdate body)
        {
            var arguments = new object[] { authToken,user,body };
            return (Task<UserUpdated>) methodImpls["updateUser"](Client, arguments);
        }

        public virtual Task<Successful> setDefaultTeam(string authToken,object body)
        {
            var arguments = new object[] { authToken,body };
            return (Task<Successful>) methodImpls["setDefaultTeam"](Client, arguments);
        }

    }
}


